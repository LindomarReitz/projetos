/**
 * This class is generated by jOOQ
 */
package test.generated.information_schema.tables;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = {"http://www.jooq.org", "2.6.0"},
                            comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings("all")
public class Triggers extends org.jooq.impl.TableImpl<test.generated.information_schema.tables.records.TriggersRecord> {

	private static final long serialVersionUID = 1121790379;

	/**
	 * The singleton instance of information_schema.triggers
	 */
	public static final test.generated.information_schema.tables.Triggers TRIGGERS = new test.generated.information_schema.tables.Triggers();

	/**
	 * The class holding records for this type
	 */
	@Override
	public java.lang.Class<test.generated.information_schema.tables.records.TriggersRecord> getRecordType() {
		return test.generated.information_schema.tables.records.TriggersRecord.class;
	}

	/**
	 * The table column <code>information_schema.triggers.trigger_catalog</code>
	 */
	public final org.jooq.TableField<test.generated.information_schema.tables.records.TriggersRecord, java.lang.String> TRIGGER_CATALOG = createField("trigger_catalog", org.jooq.impl.SQLDataType.VARCHAR, this);

	/**
	 * The table column <code>information_schema.triggers.trigger_schema</code>
	 */
	public final org.jooq.TableField<test.generated.information_schema.tables.records.TriggersRecord, java.lang.String> TRIGGER_SCHEMA = createField("trigger_schema", org.jooq.impl.SQLDataType.VARCHAR, this);

	/**
	 * The table column <code>information_schema.triggers.trigger_name</code>
	 */
	public final org.jooq.TableField<test.generated.information_schema.tables.records.TriggersRecord, java.lang.String> TRIGGER_NAME = createField("trigger_name", org.jooq.impl.SQLDataType.VARCHAR, this);

	/**
	 * The table column <code>information_schema.triggers.event_manipulation</code>
	 */
	public final org.jooq.TableField<test.generated.information_schema.tables.records.TriggersRecord, java.lang.String> EVENT_MANIPULATION = createField("event_manipulation", org.jooq.impl.SQLDataType.VARCHAR, this);

	/**
	 * The table column <code>information_schema.triggers.event_object_catalog</code>
	 */
	public final org.jooq.TableField<test.generated.information_schema.tables.records.TriggersRecord, java.lang.String> EVENT_OBJECT_CATALOG = createField("event_object_catalog", org.jooq.impl.SQLDataType.VARCHAR, this);

	/**
	 * The table column <code>information_schema.triggers.event_object_schema</code>
	 */
	public final org.jooq.TableField<test.generated.information_schema.tables.records.TriggersRecord, java.lang.String> EVENT_OBJECT_SCHEMA = createField("event_object_schema", org.jooq.impl.SQLDataType.VARCHAR, this);

	/**
	 * The table column <code>information_schema.triggers.event_object_table</code>
	 */
	public final org.jooq.TableField<test.generated.information_schema.tables.records.TriggersRecord, java.lang.String> EVENT_OBJECT_TABLE = createField("event_object_table", org.jooq.impl.SQLDataType.VARCHAR, this);

	/**
	 * The table column <code>information_schema.triggers.action_order</code>
	 */
	public final org.jooq.TableField<test.generated.information_schema.tables.records.TriggersRecord, java.lang.Integer> ACTION_ORDER = createField("action_order", org.jooq.impl.SQLDataType.INTEGER, this);

	/**
	 * The table column <code>information_schema.triggers.action_condition</code>
	 */
	public final org.jooq.TableField<test.generated.information_schema.tables.records.TriggersRecord, java.lang.String> ACTION_CONDITION = createField("action_condition", org.jooq.impl.SQLDataType.VARCHAR, this);

	/**
	 * The table column <code>information_schema.triggers.action_statement</code>
	 */
	public final org.jooq.TableField<test.generated.information_schema.tables.records.TriggersRecord, java.lang.String> ACTION_STATEMENT = createField("action_statement", org.jooq.impl.SQLDataType.VARCHAR, this);

	/**
	 * The table column <code>information_schema.triggers.action_orientation</code>
	 */
	public final org.jooq.TableField<test.generated.information_schema.tables.records.TriggersRecord, java.lang.String> ACTION_ORIENTATION = createField("action_orientation", org.jooq.impl.SQLDataType.VARCHAR, this);

	/**
	 * The table column <code>information_schema.triggers.condition_timing</code>
	 */
	public final org.jooq.TableField<test.generated.information_schema.tables.records.TriggersRecord, java.lang.String> CONDITION_TIMING = createField("condition_timing", org.jooq.impl.SQLDataType.VARCHAR, this);

	/**
	 * The table column <code>information_schema.triggers.condition_reference_old_table</code>
	 */
	public final org.jooq.TableField<test.generated.information_schema.tables.records.TriggersRecord, java.lang.String> CONDITION_REFERENCE_OLD_TABLE = createField("condition_reference_old_table", org.jooq.impl.SQLDataType.VARCHAR, this);

	/**
	 * The table column <code>information_schema.triggers.condition_reference_new_table</code>
	 */
	public final org.jooq.TableField<test.generated.information_schema.tables.records.TriggersRecord, java.lang.String> CONDITION_REFERENCE_NEW_TABLE = createField("condition_reference_new_table", org.jooq.impl.SQLDataType.VARCHAR, this);

	/**
	 * The table column <code>information_schema.triggers.condition_reference_old_row</code>
	 */
	public final org.jooq.TableField<test.generated.information_schema.tables.records.TriggersRecord, java.lang.String> CONDITION_REFERENCE_OLD_ROW = createField("condition_reference_old_row", org.jooq.impl.SQLDataType.VARCHAR, this);

	/**
	 * The table column <code>information_schema.triggers.condition_reference_new_row</code>
	 */
	public final org.jooq.TableField<test.generated.information_schema.tables.records.TriggersRecord, java.lang.String> CONDITION_REFERENCE_NEW_ROW = createField("condition_reference_new_row", org.jooq.impl.SQLDataType.VARCHAR, this);

	/**
	 * The table column <code>information_schema.triggers.created</code>
	 */
	public final org.jooq.TableField<test.generated.information_schema.tables.records.TriggersRecord, java.sql.Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP, this);

	public Triggers() {
		super("triggers", test.generated.information_schema.InformationSchema.INFORMATION_SCHEMA);
	}

	public Triggers(java.lang.String alias) {
		super(alias, test.generated.information_schema.InformationSchema.INFORMATION_SCHEMA, test.generated.information_schema.tables.Triggers.TRIGGERS);
	}

	@Override
	public test.generated.information_schema.tables.Triggers as(java.lang.String alias) {
		return new test.generated.information_schema.tables.Triggers(alias);
	}
}
