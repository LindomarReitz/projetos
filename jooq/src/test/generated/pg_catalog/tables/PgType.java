/**
 * This class is generated by jOOQ
 */
package test.generated.pg_catalog.tables;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = {"http://www.jooq.org", "2.6.0"},
                            comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings("all")
public class PgType extends org.jooq.impl.TableImpl<test.generated.pg_catalog.tables.records.PgTypeRecord> {

	private static final long serialVersionUID = -211605898;

	/**
	 * The singleton instance of pg_catalog.pg_type
	 */
	public static final test.generated.pg_catalog.tables.PgType PG_TYPE = new test.generated.pg_catalog.tables.PgType();

	/**
	 * The class holding records for this type
	 */
	@Override
	public java.lang.Class<test.generated.pg_catalog.tables.records.PgTypeRecord> getRecordType() {
		return test.generated.pg_catalog.tables.records.PgTypeRecord.class;
	}

	/**
	 * The table column <code>pg_catalog.pg_type.typname</code>
	 */
	public final org.jooq.TableField<test.generated.pg_catalog.tables.records.PgTypeRecord, java.lang.String> TYPNAME = createField("typname", org.jooq.impl.SQLDataType.VARCHAR, this);

	/**
	 * The table column <code>pg_catalog.pg_type.typnamespace</code>
	 */
	public final org.jooq.TableField<test.generated.pg_catalog.tables.records.PgTypeRecord, java.lang.Long> TYPNAMESPACE = createField("typnamespace", org.jooq.impl.SQLDataType.BIGINT, this);

	/**
	 * The table column <code>pg_catalog.pg_type.typowner</code>
	 */
	public final org.jooq.TableField<test.generated.pg_catalog.tables.records.PgTypeRecord, java.lang.Long> TYPOWNER = createField("typowner", org.jooq.impl.SQLDataType.BIGINT, this);

	/**
	 * The table column <code>pg_catalog.pg_type.typlen</code>
	 */
	public final org.jooq.TableField<test.generated.pg_catalog.tables.records.PgTypeRecord, java.lang.Short> TYPLEN = createField("typlen", org.jooq.impl.SQLDataType.SMALLINT, this);

	/**
	 * The table column <code>pg_catalog.pg_type.typbyval</code>
	 */
	public final org.jooq.TableField<test.generated.pg_catalog.tables.records.PgTypeRecord, java.lang.Boolean> TYPBYVAL = createField("typbyval", org.jooq.impl.SQLDataType.BOOLEAN, this);

	/**
	 * The table column <code>pg_catalog.pg_type.typtype</code>
	 */
	public final org.jooq.TableField<test.generated.pg_catalog.tables.records.PgTypeRecord, java.lang.String> TYPTYPE = createField("typtype", org.jooq.impl.SQLDataType.CHAR, this);

	/**
	 * The table column <code>pg_catalog.pg_type.typcategory</code>
	 */
	public final org.jooq.TableField<test.generated.pg_catalog.tables.records.PgTypeRecord, java.lang.String> TYPCATEGORY = createField("typcategory", org.jooq.impl.SQLDataType.CHAR, this);

	/**
	 * The table column <code>pg_catalog.pg_type.typispreferred</code>
	 */
	public final org.jooq.TableField<test.generated.pg_catalog.tables.records.PgTypeRecord, java.lang.Boolean> TYPISPREFERRED = createField("typispreferred", org.jooq.impl.SQLDataType.BOOLEAN, this);

	/**
	 * The table column <code>pg_catalog.pg_type.typisdefined</code>
	 */
	public final org.jooq.TableField<test.generated.pg_catalog.tables.records.PgTypeRecord, java.lang.Boolean> TYPISDEFINED = createField("typisdefined", org.jooq.impl.SQLDataType.BOOLEAN, this);

	/**
	 * The table column <code>pg_catalog.pg_type.typdelim</code>
	 */
	public final org.jooq.TableField<test.generated.pg_catalog.tables.records.PgTypeRecord, java.lang.String> TYPDELIM = createField("typdelim", org.jooq.impl.SQLDataType.CHAR, this);

	/**
	 * The table column <code>pg_catalog.pg_type.typrelid</code>
	 */
	public final org.jooq.TableField<test.generated.pg_catalog.tables.records.PgTypeRecord, java.lang.Long> TYPRELID = createField("typrelid", org.jooq.impl.SQLDataType.BIGINT, this);

	/**
	 * The table column <code>pg_catalog.pg_type.typelem</code>
	 */
	public final org.jooq.TableField<test.generated.pg_catalog.tables.records.PgTypeRecord, java.lang.Long> TYPELEM = createField("typelem", org.jooq.impl.SQLDataType.BIGINT, this);

	/**
	 * The table column <code>pg_catalog.pg_type.typarray</code>
	 */
	public final org.jooq.TableField<test.generated.pg_catalog.tables.records.PgTypeRecord, java.lang.Long> TYPARRAY = createField("typarray", org.jooq.impl.SQLDataType.BIGINT, this);

	/**
	 * The table column <code>pg_catalog.pg_type.typinput</code>
	 */
	public final org.jooq.TableField<test.generated.pg_catalog.tables.records.PgTypeRecord, java.lang.String> TYPINPUT = createField("typinput", org.jooq.impl.SQLDataType.VARCHAR, this);

	/**
	 * The table column <code>pg_catalog.pg_type.typoutput</code>
	 */
	public final org.jooq.TableField<test.generated.pg_catalog.tables.records.PgTypeRecord, java.lang.String> TYPOUTPUT = createField("typoutput", org.jooq.impl.SQLDataType.VARCHAR, this);

	/**
	 * The table column <code>pg_catalog.pg_type.typreceive</code>
	 */
	public final org.jooq.TableField<test.generated.pg_catalog.tables.records.PgTypeRecord, java.lang.String> TYPRECEIVE = createField("typreceive", org.jooq.impl.SQLDataType.VARCHAR, this);

	/**
	 * The table column <code>pg_catalog.pg_type.typsend</code>
	 */
	public final org.jooq.TableField<test.generated.pg_catalog.tables.records.PgTypeRecord, java.lang.String> TYPSEND = createField("typsend", org.jooq.impl.SQLDataType.VARCHAR, this);

	/**
	 * The table column <code>pg_catalog.pg_type.typmodin</code>
	 */
	public final org.jooq.TableField<test.generated.pg_catalog.tables.records.PgTypeRecord, java.lang.String> TYPMODIN = createField("typmodin", org.jooq.impl.SQLDataType.VARCHAR, this);

	/**
	 * The table column <code>pg_catalog.pg_type.typmodout</code>
	 */
	public final org.jooq.TableField<test.generated.pg_catalog.tables.records.PgTypeRecord, java.lang.String> TYPMODOUT = createField("typmodout", org.jooq.impl.SQLDataType.VARCHAR, this);

	/**
	 * The table column <code>pg_catalog.pg_type.typanalyze</code>
	 */
	public final org.jooq.TableField<test.generated.pg_catalog.tables.records.PgTypeRecord, java.lang.String> TYPANALYZE = createField("typanalyze", org.jooq.impl.SQLDataType.VARCHAR, this);

	/**
	 * The table column <code>pg_catalog.pg_type.typalign</code>
	 */
	public final org.jooq.TableField<test.generated.pg_catalog.tables.records.PgTypeRecord, java.lang.String> TYPALIGN = createField("typalign", org.jooq.impl.SQLDataType.CHAR, this);

	/**
	 * The table column <code>pg_catalog.pg_type.typstorage</code>
	 */
	public final org.jooq.TableField<test.generated.pg_catalog.tables.records.PgTypeRecord, java.lang.String> TYPSTORAGE = createField("typstorage", org.jooq.impl.SQLDataType.CHAR, this);

	/**
	 * The table column <code>pg_catalog.pg_type.typnotnull</code>
	 */
	public final org.jooq.TableField<test.generated.pg_catalog.tables.records.PgTypeRecord, java.lang.Boolean> TYPNOTNULL = createField("typnotnull", org.jooq.impl.SQLDataType.BOOLEAN, this);

	/**
	 * The table column <code>pg_catalog.pg_type.typbasetype</code>
	 */
	public final org.jooq.TableField<test.generated.pg_catalog.tables.records.PgTypeRecord, java.lang.Long> TYPBASETYPE = createField("typbasetype", org.jooq.impl.SQLDataType.BIGINT, this);

	/**
	 * The table column <code>pg_catalog.pg_type.typtypmod</code>
	 */
	public final org.jooq.TableField<test.generated.pg_catalog.tables.records.PgTypeRecord, java.lang.Integer> TYPTYPMOD = createField("typtypmod", org.jooq.impl.SQLDataType.INTEGER, this);

	/**
	 * The table column <code>pg_catalog.pg_type.typndims</code>
	 */
	public final org.jooq.TableField<test.generated.pg_catalog.tables.records.PgTypeRecord, java.lang.Integer> TYPNDIMS = createField("typndims", org.jooq.impl.SQLDataType.INTEGER, this);

	/**
	 * The table column <code>pg_catalog.pg_type.typdefaultbin</code>
	 */
	public final org.jooq.TableField<test.generated.pg_catalog.tables.records.PgTypeRecord, java.lang.String> TYPDEFAULTBIN = createField("typdefaultbin", org.jooq.impl.SQLDataType.CLOB, this);

	/**
	 * The table column <code>pg_catalog.pg_type.typdefault</code>
	 */
	public final org.jooq.TableField<test.generated.pg_catalog.tables.records.PgTypeRecord, java.lang.String> TYPDEFAULT = createField("typdefault", org.jooq.impl.SQLDataType.CLOB, this);

	public PgType() {
		super("pg_type", test.generated.pg_catalog.PgCatalog.PG_CATALOG);
	}

	public PgType(java.lang.String alias) {
		super(alias, test.generated.pg_catalog.PgCatalog.PG_CATALOG, test.generated.pg_catalog.tables.PgType.PG_TYPE);
	}

	@Override
	public test.generated.pg_catalog.tables.PgType as(java.lang.String alias) {
		return new test.generated.pg_catalog.tables.PgType(alias);
	}
}
